{"version":3,"sources":["services/quizFileService.js","components/QuizForm.js","components/LogForm.js","Helpers/Contexts.js","components/QuizMainMenu.js","Helpers/QuestionBank.js","components/Quiz.js","components/EndScreen.js","components/QuizPrompt.js","RouterMapping.js","App.js","index.js"],"names":["GetFileContents","file","isQuestion","s","includes","isAnswer","isAnEnd","isComment","bundleStrings","sArray","str","i","length","stringLines","split","readingQuestion","readingAnswer","readingOption","data","ovec","qvec","answer","line","push","QuizForm","props","quizData","setQuizData","uploadProps","username","timer","name","action","headers","authorization","onChange","info","status","console","log","fileList","message","success","error","beforeUpload","reader","FileReader","onload","e","qbank","target","result","JSON","stringify","readAsText","navigate","useNavigate","routeChange","path","onFinish","values","className","initialValues","remember","Item","rules","required","prefix","UserOutlined","placeholder","min","max","value","addonAfter","defaultValue","icon","UploadOutlined","type","htmlType","onClick","NormalLoginForm","QuizContext","createContext","QuizMainMenu","useContext","setGameState","gameState","setTimer","Date","now","Questions","prompt","options","Options","chooseOption","optionSelected","currQuestion","array","map","option","number","Quiz","score","setScore","useState","setCurrQuestion","setOptionSelected","checkAnswerAndIncrementScore","initialMinute","Statistic","Countdown","Math","floor","initialSeconds","minutes","setMinutes","seconds","setSeconds","useEffect","myInterval","setInterval","clearInterval","gutter","span","question","EndScreen","QuizPrompt","Provider","RoutingConfig","a","fallback","exact","element","LogForm","App","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76387a5f.chunk.js","sourcesContent":["export function GetFileContents(file) {\n    let str = `@QUESTIONS\nWho is the CEO of Alphabet\n@ANSWERS\n3\nMaichel Dell\nBill Gates\nSundar Pichai\nLarry Page\n@END\n\n@QUESTION\n\nWhen was West Virginia University founded?\n\n@ANSWERS\n3\n1967\n1945\n1867\n1921\nNone of the above\nAll of the above\n@END\n* Remember: blank lines and comments are ignored throughout!\n\n* END OF FILE\n`;\n\n    const QUESTION = \"@Q\";\n    const ANSWER = \"@A\";\n    const END = \"@E\";\n    const COMMENT = \"*\";\n\n    function isQuestion(s) {\n        return (s.includes(QUESTION));\n    }\n    function isAnswer(s) {\n        return (s.includes(ANSWER));\n    }\n    function isAnEnd(s) {\n        return (s.includes(END));\n    }\n    function isComment(s) {\n        return (s.includes(COMMENT));\n    }\n    function blank(s) {\n        return s.length == 0;\n    }\n\n    function bundleStrings(sArray) {\n        let str = '';\n        for(let i = 0; i < sArray.length; i++) {\n            str = str + sArray[i] + (i < sArray.length - 1 ? '\\n' : '');\n        }\n        return str;\n    }\n\n    const stringLines = str.split('\\n');\n\n    let readingQuestion = false;\n    let readingAnswer = false;\n    let readingOption = false;\n\n    const data = {\n        \"question\": [],\n        \"options\": [],\n        \"answer\": [],\n        \"asked\": [],\n\n    }\n\n    let ovec = [];\n    let qvec = [];\n    let answer = '';\n\n    let qno = 0;\n\n    for (let i = 0; i < stringLines.length; i++) {\n        let line = stringLines[i];\n        if (blank(line)) {\n            continue;\n        }\n        if (!isComment(line)) {\n            if (isQuestion(line)) {\n                readingQuestion = true;\n                readingAnswer = false;\n                readingOption = false;\n                continue;\n            } else if (isAnswer(line)) {\n                readingQuestion = false;\n                readingAnswer = true;\n                readingOption = false;\n                continue;\n            } else if (isAnEnd(line)) {\n                readingQuestion = true;\n                readingAnswer = false;\n                readingOption = false;\n\n                // QUIZ quiz = QUIZ();\n                // quiz.question = qvec;\n                // quiz.answer = answer;\n                // quiz.options = ovec;\n                // quiz.asked = false;\n                // quizVector.push_back(quiz);\n\n                // qvec.clear();\n                // ovec.clear();\n\n                data[\"question\"].push(bundleStrings(qvec));\n                data[\"options\"].push(ovec);\n                data[\"answer\"].push(answer);\n                data[\"asked\"].push(false);\n\n                qvec = [];\n                ovec = [];\n\n\n                continue;\n            }\n        }\n        if (readingQuestion) {\n            qvec.push(line);\n        } else if (readingAnswer) {\n            answer = line;\n            readingOption = true;\n            readingAnswer = false;\n        } else if (readingOption) {\n            ovec.push(line);\n        }\n    }\n    return data;\n}\n\nexport default GetFileContents;\n\n\n\n\n","import React, { createContext, useState } from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, InputNumber, Button, Checkbox, Upload, message } from 'antd';\nimport { UserOutlined, FieldTimeOutlined } from '@ant-design/icons';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { useNavigate } from 'react-router-dom';\nimport { GetFileContents } from '../services/quizFileService';\n\n\nconst QuizForm = (props) => {\n\n  // const { userData, setUserData } = useState(userDataRead)\n\n  const { quizData, setQuizData } = props;\n\n  const onChange = (value) => {\n    setQuizData({...quizData, 'timer': value});\n    console.log('changed quiz timer', value);\n  }\n  const onChangeNoOfQuestions = (value) => {\n    setQuizData({...quizData, 'noq': value});\n    console.log('changed Question count', value);\n    console.log(`quizData after incrementing Question count ${JSON.stringify(quizData)}`);\n\n  }\n  const uploadProps = {\n    username: '',\n    timer: '',\n\n    name: 'file',\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n      authorization: 'authorization-text',\n    },\n    onChange(info) {\n      if (info.file.status !== 'uploading') {\n        console.log(info.file, info.fileList);\n      }\n      if (info.file.status === 'done') {\n        message.success(`${info.file.name} file uploaded successfully`);\n        console.log(`${info.file.name} file uploaded successfully`);\n      } else if (info.file.status === 'error') {\n        message.error(`${info.file.name} file upload failed.`);\n      }\n    },\n    beforeUpload: (file) => {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        // message.success(e.target.result)\n        // const bank = e.target.result.split('\\n');\n        // for (let s = 0; s < bank.length; s++) {\n        //   console.log(bank[s]);\n        // }\n\n        const qbank = GetFileContents(e.target.result);\n        setQuizData({ ...quizData, qbank });\n        message.success(\"Uploaded\");\n        console.log(`quizData after file upload = ${JSON.stringify(quizData)}`);\n        console.log(`qbank after file upload = ${JSON.stringify(qbank)}`);\n      };\n      reader.readAsText(file);\n      console.log(reader);\n      // Prevent upload\n      return false;\n    }\n  };\n\n  const navigate = useNavigate();\n\n  const routeChange = (path) => {\n    message.success(`reached path ${path}`)\n    navigate(path);\n  }\n\n\n\n  const onFinish = (values) => {\n    console.log('Received values of form: ', values);\n    routeChange(\"/quiz\");\n  };\n\n\n  return (\n    <div className=\"App flex\">\n      <Form\n        name=\"normal_login\"\n        className=\"login-form\"\n        initialValues={{\n          remember: true,\n        }}\n        onFinish={onFinish}\n      >\n        <Form.Item\n          name=\"username\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input your Username!',\n            },\n          ]}\n        >\n          <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n        </Form.Item>\n        <Form.Item\n          name=\"timer\"\n          rules={[\n            {\n              required: true,\n              message: 'Please input timer',\n            },\n          ]}\n        >\n          {/* <Input\n          prefix={<FieldTimeOutlined className=\"site-form-item-icon\" />}\n          type=\"text\"\n          placeholder=\"Timer\"\n        /> */}\n          <InputNumber\n            min={1}\n            max={1000}\n            \n            onChange={onChange}\n            addonAfter=\"Timer (Seconds)\"\n            className=\"login-form-button\" />\n\n        </Form.Item>\n\n        <Form.Item\n          name=\"noq\"\n          rules={[\n            {\n              required: true,\n              message: 'No. of questions',\n            },\n          ]}\n        >\n          {/* <Input\n          prefix={<FieldTimeOutlined className=\"site-form-item-icon\" />}\n          type=\"text\"\n          placeholder=\"Timer\"\n        /> */}\n          <InputNumber\n            min={1}\n            max={1000}\n            defaultValue={1}\n            onChange={onChangeNoOfQuestions}\n            addonAfter=\"No. of questions\"\n            className=\"login-form-button\" />\n\n        </Form.Item>\n\n        <Form.Item>\n          <Upload {...uploadProps} >\n            <Button\n              icon={<UploadOutlined />}\n              className=\"upload-button\"\n            >\n              Click to Upload Quiz file\n            </Button>\n          </Upload>\n        </Form.Item>\n\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\"\n            onClick={() => onFinish()}>\n            Start Quiz\n          </Button>\n        </Form.Item>\n\n        <Button type=\"primary\" className=\"login-form-button\"\n\n          onClick={() => routeChange(\"/log\")}>\n          Get Log File\n        </Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default QuizForm;","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, InputNumber, Button, Checkbox, Upload, message } from 'antd';\nimport { UserOutlined, FieldTimeOutlined } from '@ant-design/icons';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { useNavigate } from 'react-router-dom';\n\nconst props = {\n    username: '',\n    timer: '',\n\n    name: 'file',\n    action: 'https://www.mocky.io/v2/5cc8019d300000980a055e76',\n    headers: {\n        authorization: 'authorization-text',\n    },\n    onChange(info) {\n        if (info.file.status !== 'uploading') {\n            console.log(info.file, info.fileList);\n        }\n        if (info.file.status === 'done') {\n            message.success(`${info.file.name} file uploaded successfully`);\n        } else if (info.file.status === 'error') {\n            message.error(`${info.file.name} file upload failed.`);\n        }\n    },\n};\n\nfunction onChange(value) {\n    console.log('changed', value);\n}\n\nconst NormalLoginForm = () => {\n    const onFinish = (values) => {\n        console.log('Received values of form: ', values);\n    };\n    const navigate = useNavigate();\n    const routeChange = () => {\n        let path = \"/\";\n        navigate(path);\n    }\n\n    return (\n        <div className=\"App flex\">\n            <Form\n                name=\"normal_login\"\n                className=\"login-form\"\n                initialValues={{\n                    remember: true,\n                }}\n                onFinish={onFinish}\n            >\n                <Form.Item\n                    name=\"username\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please input your Username!',\n                        },\n                    ]}\n                >\n                    <Input prefix={<UserOutlined className=\"site-form-item-icon\" />} placeholder=\"Username\" />\n                </Form.Item>\n\n\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Download Log\n                    </Button>\n                </Form.Item>\n\n                <Button type=\"primary\" className=\"login-form-button\"\n                    onClick={routeChange}>\n                    Home\n                </Button>\n            </Form>\n        </div>\n    );\n};\n\nexport default NormalLoginForm;","import { createContext } from \"react\";\n\nexport const QuizContext = createContext();\nexport const UserDataContext = createContext();","import React, { useContext, useState } from 'react';\n// import { Statistic, Row, Col } from 'antd';\nimport { QuizContext } from \"../Helpers/Contexts\"\nimport \"../App.css\"\n\nfunction QuizMainMenu() {\n    /* Global State */\n    const { gameState, setGameState, timer, setTimer } = useContext(QuizContext);\n    // const { Countdown } = Statistic;\n\n    // const onFinish = () => {\n    //     console.log(\"Timer finished! in <Quiz />\");\n    //     setGameState(\"endScreen\");\n    // }\n\n    const startButtonOnClick = () => {\n        setTimer(Date.now() + timer*1000);\n        setGameState(\"quiz\");\n    }\n\n    return (\n        <div className='flex Menu'>\n            {/* <div className='flex'>\n                <Row gutter={0}>\n                    <Col span={20}>\n                        <Countdown title=\"Time left\" value={Date.now() + timer * 1000} onFinish={onFinish} />\n                    </Col>\n                </Row>\n            </div> */}\n            <button onClick={startButtonOnClick}>Start Quiz</button>\n        </div>\n    )\n}\n\nexport default QuizMainMenu;\n\n\n\n/*\n\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport '../index.css';\nimport { Card, Button } from 'antd';\nimport { Radio, Input, Space } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { RightOutlined } from '@ant-design/icons';\n\n\nconst Quiz = () => {\n\n    const state = {\n        value: 1\n    }\n    const onRadioChange = e => {\n        // console.log('radio checked', e.target.value);\n        // this.setState({\n        //     value: e.target.value,\n        // });\n    };\n    const onFinish = (values) => {\n        console.log('Received values of form: ', values);\n    };\n\n    const navigate = useNavigate();\n    \n    return (\n        <div className=\"App flex\">\n            <div class=\"quiz-frame\">\n                <div className=\"site-card-border-less-wrapper\">\n                    <Card title=\"Card title\" bordered={false} style={{ width: 300 }}>\n                        {}\n                        </Card>\n                        </div>\n                        <div class=\"quiz-next flex\">\n                            <Button type=\"primary\" className=\"login-form\"\n                                shape=\"circle\"\n                                icon={<RightOutlined />}\n                                onClick={() => navigate(\"/\")} />\n        \n                        </div>\n                    </div>\n                </div>\n            );\n        \n        };\n        \n        export default Quiz;\n\n*/","export const Questions = [\n    {\n      prompt: \"What is my name?\",\n      options: [\"RV\", \"Josh\", \"Pedro\" ],\n      answer: 3,\n    },\n    {\n      prompt: \"Which of this is not a programming language. This is also a part of the question?\",\n      options: [\"Cobra\", \"Python\", \"Diano\" ],\n      answer: 3,\n    },\n    {\n      prompt: \"Which of this is not a javascript framework?\",\n      options:[\"React\", \"Angular\", \"Vue\", \"Java\", \"asd\", \"sdasdas\"],\n      answer: 3,\n    },\n  ];","import React, { useState, useContext, useEffect } from \"react\";\nimport { QuizContext } from \"../Helpers/Contexts\";\nimport { Questions } from \"../Helpers/QuestionBank\";\nimport { Statistic, Row, Col } from \"antd\";\n\nconst Options = (props) => {\n    const { Questions, chooseOption, optionSelected, currQuestion, quizData } = props;\n    // const array = Questions[currQuestion].options;\n    const array = quizData.qbank.options[currQuestion];\n    // console.log(`\"Quiz Data = ${JSON.stringify(quizData)}`);\n    return (\n        <>\n            {array.map((option, number) => {\n                // here you return the new array created by map\n                console.log(\n                    `Number is ${number}, Option is ${option}, chooseOption(${number})`\n                );\n                console.log(`op selected = ${optionSelected}, option = ${option}`);\n                return (\n                    <button\n                        className={optionSelected === `${number + 1}` ? \"button selected\" : \"button\"}\n                        onClick={() => chooseOption(`${number + 1}`)}\n                    >\n                        {option}\n                    </button>\n                );\n            })}\n        </>\n    );\n};\n\nfunction Quiz() {\n    const { score, setScore, setGameState, timer, setTimer, quizData } =\n        useContext(QuizContext);\n\n    const [currQuestion, setCurrQuestion] = useState(0);\n    const [optionSelected, setOptionSelected] = useState(\"\");\n\n    // useEffect(() => {\n    //     // setTimer(timer);\n    //     console.log(\n    //         `loaded <Quiz /> component. Timer is set for ${(timer - Date.now()) / 1000\n    //         } secs.`\n    //     );\n    // });\n\n    const chooseOption = (option) => {\n        console.log(`Clicked button ${option}`);\n        setOptionSelected(option);\n    };\n\n    const checkAnswerAndIncrementScore = () => {\n        if (optionSelected == quizData.qbank.answer[currQuestion]) {\n            setScore(score + 1);\n        }\n    }\n\n    const nextQuestion = () => {\n        console.log(\n            `Option selected = ${optionSelected} \\n Correct Answer = ${Questions[currQuestion].answer}`\n        );\n        // console.log(`optionSelected == Questions[currQuestion].answer -> ${optionSelected == Questions[currQuestion].answer}`);\n\n        checkAnswerAndIncrementScore();\n        // alert(score);\n        if (currQuestion == quizData.qbank.question.length - 1) {\n            // show results button\n        }\n        setCurrQuestion(currQuestion + 1);\n    };\n\n    const finishQuiz = () => {\n        checkAnswerAndIncrementScore();\n        setGameState(\"endScreen\");\n    };\n\n    const { Countdown } = Statistic;\n    const deadline = Date.now() + 1000 * 5; // Moment is also OK\n\n    const onFinish = () => {\n        console.log(\"Timer finished! in <Quiz />\");\n        setGameState(\"endScreen\");\n    };\n\n    const getTimerValue = () => {\n        return Date.now() + quizData.timer * 1000\n    }\n\n    const timerValue = Date.now() + quizData.timer * 1000;\n\n    /* Dynamic */\n    const initialMinute = Math.floor(quizData.timer / 60);\n    const initialSeconds = quizData.timer - initialMinute * 60;\n\n    /* Static */\n    // const initialMinute = 0;\n    // const initialSeconds = 20;\n\n    const [minutes, setMinutes] = useState(initialMinute);\n    const [seconds, setSeconds] = useState(initialSeconds);\n\n    useEffect(() => {\n        let myInterval = setInterval(() => {\n            if (seconds > 0) {\n                setSeconds(seconds - 1);\n            }\n            if (seconds === 0) {\n                if (minutes === 0) {\n                    clearInterval(myInterval);\n                    onFinish();\n                } else {\n                    setMinutes(minutes - 1);\n                    setSeconds(59);\n                }\n            }\n            // if (seconds === 0) {\n            //     clearInterval(myInterval);\n            //     onFinish();\n            // }\n        }, 1000)\n        return () => {\n            clearInterval(myInterval);\n        };\n    });\n\n    return (\n        <div className=\"Quiz flex\">\n            {/* <p>Question Answers | In (Quiz/) component</p> */}\n            <div className=\"flex\">\n                <Row gutter={0}>\n                    <Col span={30}>\n                        {/* <Countdown\n                            title=\"Time left\"\n                            value={timerValue}\n                            onFinish={onFinish}\n                        /> */}\n                        <p className=\"flex heading timer \">{minutes} : {seconds}</p>\n                    </Col>\n                </Row>\n            </div>\n            <h2 className=\"heading\">{quizData.qbank.question[currQuestion]}</h2>\n            <div className=\"options flex\">\n                <Options {...{ Questions, chooseOption, optionSelected, currQuestion, quizData }} />\n            </div>\n            {currQuestion == quizData.qbank.question.length - 1 ? (\n                <button onClick={finishQuiz}>Finish Quiz</button>\n            ) : (\n                <button onClick={nextQuestion}>Next Question</button>\n            )}\n        </div>\n    );\n}\n\nexport default Quiz;\n\n/*\nimport React, { useState, useContext, useEffect } from 'react';\nimport { QuizContext } from '../Helpers/Contexts';\nimport { Questions } from \"../Helpers/QuestionBank\";\nimport { Statistic, Row, Col } from 'antd';\n\nfunction Quiz() {\n    const { score, setScore, setGameState, timer, setTimer } = useContext(QuizContext);\n\n    const [currQuestion, setCurrQuestion] = useState(0);\n    const [optionSelected, setOptionSelected] = useState(\"\");\n\n    useEffect(() => {\n        // setTimer(timer);\n        console.log(`loaded <Quiz /> component. Timer is set for ${(timer - Date.now())/1000} secs.`);\n    });\n\n    \n\n    const chooseOption = (option) => {\n        console.log(`Clicked button ${option}`);\n        setOptionSelected(option);\n    };\n\n    const renderButtons = () => {\n        console.log(`Rendering Buttons: Current optionSelected is ${optionSelected}`);\n        // works fine\n        const array = Questions[currQuestion].options;\n        var number = 0;\n        const op = [\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"];\n        const buttonGroup = array.map((option, number) => { // here you return the new array created by map\n            number = number + 1;\n            console.log(`Number is ${number}, Option is ${option}, chooseOption(${op[number]})`);\n            return <button className={optionSelected===number ? 'selected' : ''} onClick={() => chooseOption(op[number])}>{option}</button>\n        });\n        return buttonGroup;\n    };\n\n    const nextQuestion = () => {\n        console.log(`Option selected = ${optionSelected} \\n Correct Answer = ${Questions[currQuestion].answer}`);\n        // console.log(`optionSelected == Questions[currQuestion].answer -> ${optionSelected == Questions[currQuestion].answer}`);\n\n        if (optionSelected == Questions[currQuestion].answer) {\n            setScore(score + 1);\n        }\n        // alert(score);\n        if (currQuestion == 'sizeOfTotalAskableQuestions') {\n            // show results button\n        }\n        setCurrQuestion(currQuestion + 1);\n    };\n\n    const finishQuiz = () => {\n        if (optionSelected == Questions[currQuestion].answer) {\n            setScore(score + 1);\n        }\n        setGameState(\"endScreen\");\n    }\n\n    const { Countdown } = Statistic;\n    const deadline = Date.now() + 1000 * 5; // Moment is also OK\n    const onFinish = () => {\n        console.log(\"Timer finished! in <Quiz />\");\n        setGameState(\"endScreen\");\n    }\n\n    return (\n        <div className='Quiz flex'>\n            <p>Question  Answers | In (Quiz/) component</p>\n            <div className='flex'>\n                <Row gutter={0}>\n                    <Col span={20}>\n                        <Countdown title=\"Time left\" value={Date.now() + timer*1000} onFinish={onFinish} />\n                    </Col>\n                </Row>\n            </div>\n            <h2 className='heading'>{Questions[currQuestion].prompt}</h2>\n            <div className=\"options flex\">\n                {renderButtons()}\n            </div>\n            {currQuestion == Questions.length - 1 ?\n                (<button onClick={finishQuiz}>Finish Quiz</button>) : (\n                    <button onClick={nextQuestion}>Next Question</button>\n                )}\n\n        </div>\n    )\n}\n\nexport default Quiz;\n*/","import React, { useContext, useState } from \"react\";\nimport axios from \"axios\";\nimport { QuizContext } from \"../Helpers/Contexts\"\nimport \"../App.css\";\nimport { Questions } from \"../Helpers/QuestionBank\";\n\nfunction EndScreen() {\n    const { score, setScore, setGameState, setTimer, setCurrQuestion, quizData } = useContext(QuizContext);\n\n    const restartQuiz = () => {\n        setScore(0);\n        setGameState(\"menu\");\n        setTimer(Date.now() + 1000 * 7);\n        setCurrQuestion(0);\n\n        /* Trigger backend API to store quiz results in database */\n        \n        // axios.get(\"http://localhost:8080/\", { crossdomain: true }).then(response => {\n        //     setText(response.data.text);\n        //     setAuthor(response.data.author);\n        // });\n    }\n\n    return (\n        <div className='Menu flex'>\n            <h1 className='headingEndScreen'>Quiz finished. Well played!</h1>\n            <h3 className='score'> {score} / {quizData.qbank.question.length} {\" \"}</h3>\n            <button onClick={restartQuiz}> Restart Quiz </button>\n        </div>\n    )\n}\n\nexport default EndScreen;","import React, { useState } from 'react';\n\nimport Quiz from './Quiz';\nimport EndScreen from './EndScreen';\nimport QuizMainMenu from './QuizMainMenu'\n\nimport { QuizContext } from \"../Helpers/Contexts\"\n\nfunction QuizPrompt(props) {\n    /* Global State */\n    const { quizData, setQuizData } = props;\n    const [gameState, setGameState] = useState(\"menu\");\n    const [score, setScore] = useState(0);\n    const [timer, setTimer] = useState(0);\n    const [currQuestion, setCurrQuestion] = useState(0);\n\n    console.log(`QuizData in QuizPrompt ${JSON.stringify(quizData)}`);\n    return (\n        <div className='App flex'>\n            <h1>Play Quiz Pro</h1>\n            \n            {/* <p2> No. of questions are {quizData.qbank.question.length}</p2> */}\n\n\n            {/* The following provided state can be accessed in the components inside QuizContext */}\n\n            <QuizContext.Provider value={{ gameState, \n                setGameState, score, setScore, timer, setTimer, quizData,\n                currQuestion, setCurrQuestion }}>\n                {gameState == \"menu\" && <QuizMainMenu />}\n                {gameState == \"quiz\" && <Quiz />}\n                {gameState == \"endScreen\" && <EndScreen />}\n            </QuizContext.Provider>\n\n        </div>\n    )\n}\n\nexport default QuizPrompt;\n\n\n\n/*\n\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport '../index.css';\nimport { Card, Button } from 'antd';\nimport { Radio, Input, Space } from 'antd';\nimport { useNavigate } from 'react-router-dom';\nimport { RightOutlined } from '@ant-design/icons';\n\n\nconst Quiz = () => {\n\n    const state = {\n        value: 1\n    }\n    const onRadioChange = e => {\n        // console.log('radio checked', e.target.value);\n        // this.setState({\n        //     value: e.target.value,\n        // });\n    };\n    const onFinish = (values) => {\n        console.log('Received values of form: ', values);\n    };\n\n    const navigate = useNavigate();\n    \n    return (\n        <div className=\"App flex\">\n            <div class=\"quiz-frame\">\n                <div className=\"site-card-border-less-wrapper\">\n                    <Card title=\"Card title\" bordered={false} style={{ width: 300 }}>\n                        {}\n                        </Card>\n                        </div>\n                        <div class=\"quiz-next flex\">\n                            <Button type=\"primary\" className=\"login-form\"\n                                shape=\"circle\"\n                                icon={<RightOutlined />}\n                                onClick={() => navigate(\"/\")} />\n        \n                        </div>\n                    </div>\n                </div>\n            );\n        \n        };\n        \n        export default Quiz;\n\n*/","import React, { Suspense, useState } from 'react';\n// import {\n//   BrowserRouter,\n//   Route,\n//   Link,\n\n// } from 'react-router-dom';\n\nimport { BrowserRouter as Router, Route, Routes, Switch, Link } from 'react-router-dom';\n\nimport QuizForm from './components/QuizForm';\nimport LogForm from './components/LogForm';\nimport QuizMainMenu from './components/QuizMainMenu';\nimport QuizPrompt from './components/QuizPrompt';\n\n\nconst RoutingConfig = () => {\n  const [quizData, setQuizData] = useState({a:'12'});\n  return <Router>\n    <Suspense fallback={<div>Loading...</div>}></Suspense>\n    <Routes>\n      <Route exact path=\"/\" element={<QuizForm {...{ quizData, setQuizData }} />} />\n      <Route path=\"/log\" element={<LogForm {...{ quizData, setQuizData }} />} />\n      <Route path=\"/quiz\" element={<QuizPrompt {...{ quizData, setQuizData }} />} />\n    </Routes>\n  </Router>\n};\n\nexport default RoutingConfig;\n\n\n// import React, { Suspense } from 'react';\n// // import {\n// //   BrowserRouter,\n// //   Route,\n// //   Link,\n  \n// // } from 'react-router-dom';\n\n// import { BrowserRouter as Router, Route, Routes, Switch, Link } from 'react-router-dom';\n\n// import QuizForm from './components/QuizForm';\n// import LogForm from './components/LogForm';\n// import QuizMainMenu from './components/QuizMainMenu';\n// import QuizPrompt from './components/QuizPrompt';\n\n\n// const RoutingConfig = () => (\n//     <Router>\n//       <Suspense fallback={<div>Loading...</div>}></Suspense>\n//       <Routes>\n//         <Route exact path=\"/\" element={<QuizForm/>} />\n//         <Route path=\"/log\" element={<LogForm/>} />\n//         <Route path=\"/quiz\" element={<QuizPrompt/>} />\n//       </Routes>\n//     </Router>\n// );\n\n// export default RoutingConfig;\n","import React, { Suspense } from \"react\";\nimport \"./App.css\";\nimport RoutingConfig from \"./RouterMapping\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <RoutingConfig/>\n    );\n  }\n}\n\n\n//===========================================================\n// class App extends React.Component {\n//   state = { tasks: [], currentTask: \"\", username: \"\", timer: \"\" };\n//   render() {\n//     const { tasks } = this.state;\n//     return <Router>\n//       <Route path=\"/\" component={home}></Route>\n//       <Route path=\"/log\" component={log}></Route>\n//     </Router>\n//   }\n// }\n// class home extends React.Component {\n//   render() {\n//     return (\n//       <QuizForm/>\n//     );\n//   }\n// }\n// class log extends React.Component {\n//   render() {\n//     return <label>log component</label>\n//   }\n// }\n// React.render( <App/> , document.getElementById('root'))\n\n\nexport default App;\n\n\n\n/*\nclass App extends Tasks {\n  state = { tasks: [], currentTask: \"\", username: \"\", timer: \"\" };\n  render() {\n    const { tasks } = this.state;\n    return (\n      <div className=\"App flex\">\n        <Paper elevation={3} className=\"container\">\n          <div className=\"heading\">TO-DO</div>\n          <form\n            onSubmit={this.handleSubmit}\n            className=\"flex\"\n            style={{ margin: \"15px 0\" }}\n          >\n            \n            <TextField\n              variant=\"outlined\"\n              size=\"small\"\n              style={{ width: \"80%\" }}\n              value={this.state.currentTask}\n              required={true}\n              onChange={this.handleChange}\n              placeholder=\"Add New TO-DO\"\n            />\n            <TextField\n              id=\"outlined-basic\"\n              label=\"Name\"\n              style={{ width: \"80%\" }}\n              variant=\"outlined\"\n              value={this.state.username}\n              placeholder=\"Enter your Name\"\n            />\n\n\n            <Button\n              style={{ height: \"40px\" }}\n              color=\"primary\"\n              variant=\"outlined\"\n              type=\"submit\"\n            >\n              Add task\n            </Button>\n          </form>\n          <div>\n            {tasks.map((task) => (\n              <Paper\n                key={task._id}\n                className=\"flex task_container\"\n              >\n                <Checkbox\n                  checked={task.completed}\n                  onClick={() => this.handleUpdate(task._id)}\n                  color=\"primary\"\n                />\n                <div\n                  className={\n                    task.completed\n                      ? \"task line_through\"\n                      : \"task\"\n                  }\n                >\n                  {task.task}\n                </div>\n                <Button\n                  onClick={() => this.handleDelete(task._id)}\n                  color=\"secondary\"\n                >\n                  delete\n                </Button>\n              </Paper>\n            ))}\n          </div>\n        </Paper>\n      </div>\n    );\n  }\n}\n*/","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n//const root = ReactDOM.createRoot(document.getElementById('root'));\n\n// ReactDOM.render(\n//   <App />,\n//   document.getElementById(\"root\")\n// );\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}